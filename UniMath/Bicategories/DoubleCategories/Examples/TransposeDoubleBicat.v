(*****************************************************************************************

 The transpose of Verity double bicategories

 The notion of Verity double bicategory is symmetric, because it is weak in both
 directions. For that reason, every Verity double bicategory has a transpose, which is
 the Verity double bicategory obtained by swapping the vertical and horizontal morphisms.

 Contents
 1. The 2-sided displayed category of the transpose
 2. The vertical bicategory of the transpose
 3. The whiskering operations
 4. The transpose of a Verity double bicategory

 *****************************************************************************************)
Require Import UniMath.MoreFoundations.All.
Require Import UniMath.CategoryTheory.Core.Prelude.
Require Import UniMath.CategoryTheory.TwoSidedDisplayedCats.TwoSidedDispCat.
Require Import UniMath.Bicategories.Core.Bicat.
Import Bicat.Notations.
Require Import UniMath.Bicategories.Core.BicategoryLaws.
Require Import UniMath.Bicategories.Core.Unitors.
Require Import UniMath.Bicategories.Core.Invertible_2cells.
Require Import UniMath.Bicategories.DoubleCategories.DoubleBicat.VerityDoubleBicat.
Require Import UniMath.Bicategories.DoubleCategories.DoubleBicat.UnderlyingCats.

Local Open Scope cat.
Local Open Scope double_bicat.

Section Transpose.
  Context (B : verity_double_bicat).

  Let ùïç : bicat := ver_bicat_of_verity_double_bicat B. (* \bV *)
  Let ‚Ñç : bicat := hor_bicat_of_verity_double_bicat B. (* \bH *)

  (** * 1. The 2-sided displayed category of the transpose *)
  Definition transpose_twosided_disp_cat_ob_mor
    : twosided_disp_cat_ob_mor ùïç ùïç.
  Proof.
    simple refine (_ ,, _).
    - exact (Œª (x y : B), x --> y).
    - exact (Œª (x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : B)
               (h‚ÇÅ : x‚ÇÅ --> y‚ÇÅ) (h‚ÇÇ : x‚ÇÇ --> y‚ÇÇ)
               (v‚ÇÅ : x‚ÇÅ -|-> x‚ÇÇ) (v‚ÇÇ : y‚ÇÅ -|-> y‚ÇÇ),
             square_double_bicat h‚ÇÅ h‚ÇÇ v‚ÇÅ v‚ÇÇ).
  Defined.

  Definition transpose_twosided_disp_cat_id_comp
    : twosided_disp_cat_id_comp transpose_twosided_disp_cat_ob_mor.
  Proof.
    simple refine (_ ,, _).
    - exact (Œª (x y : B) (h : x --> y), id_v_square_bicat h).
    - exact (Œª (x‚ÇÅ y‚ÇÅ z‚ÇÅ x‚ÇÇ y‚ÇÇ z‚ÇÇ : B)
               (hx : x‚ÇÅ --> x‚ÇÇ)
               (hy : y‚ÇÅ --> y‚ÇÇ)
               (hz : z‚ÇÅ --> z‚ÇÇ)
               (v‚ÇÅ : x‚ÇÅ -|-> y‚ÇÅ) (v‚ÇÇ : y‚ÇÅ -|-> z‚ÇÅ)
               (w‚ÇÅ : x‚ÇÇ -|-> y‚ÇÇ) (w‚ÇÇ : y‚ÇÇ -|-> z‚ÇÇ)
               (s‚ÇÅ : square_double_bicat hx hy v‚ÇÅ w‚ÇÅ)
               (s‚ÇÇ : square_double_bicat hy hz v‚ÇÇ w‚ÇÇ),
             s‚ÇÅ ‚ãÜv s‚ÇÇ).
  Defined.

  Definition transpose_twosided_disp_cat_data
    : twosided_disp_cat_data ùïç ùïç.
  Proof.
    simple refine (_ ,, _).
    - exact transpose_twosided_disp_cat_ob_mor.
    - exact transpose_twosided_disp_cat_id_comp.
  Defined.

  Definition transpose_ver_sq_bicat
    : ver_sq_bicat.
  Proof.
    use make_ver_sq_bicat.
    - exact ùïç.
    - exact transpose_twosided_disp_cat_data.
  Defined.

  (** * 2. The vertical bicategory of the transpose *)
  Definition transpose_ver_sq_bicat_ver_id_comp
    : ver_sq_bicat_ver_id_comp transpose_ver_sq_bicat.
  Proof.
    split.
    - split.
      + exact (Œª (x : B), id_h x).
      + exact (Œª (x y z : B)
                 (f : x --> y)
                 (g : y --> z),
               f ¬∑ g).
    - exact (Œª (x y : B) (f g : x --> y), f ==> g).
  Defined.

  Definition transpose_ver_sq_bicat_id_comp_cells
    : ver_sq_bicat_id_comp_cells transpose_ver_sq_bicat_ver_id_comp.
  Proof.
    repeat split ; cbn.
    - intros.
      apply id2.
    - intros.
      apply lunitor.
    - intros.
      apply runitor.
    - intros.
      apply linvunitor.
    - intros.
      apply rinvunitor.
    - intros.
      apply rassociator.
    - intros.
      apply lassociator.
    - exact (Œª _ _ _ _ _ œÑ Œ∏, œÑ ‚Ä¢ Œ∏).
    - exact (Œª _ _ _ f _ _ œÑ, f ‚óÉ œÑ).
    - exact (Œª _ _ _ _ _ f œÑ, œÑ ‚ñπ f).
  Defined.

  Proposition transpose_ver_sq_bicat_prebicat_laws
    : ver_sq_bicat_prebicat_laws transpose_ver_sq_bicat_id_comp_cells.
  Proof.
    exact (pr21 ‚Ñç).
  Defined.

  Definition transpose_ver_bicat_sq_bicat
    : ver_bicat_sq_bicat.
  Proof.
    use make_ver_bicat_sq_bicat.
    - exact transpose_ver_sq_bicat.
    - exact transpose_ver_sq_bicat_ver_id_comp.
    - exact transpose_ver_sq_bicat_id_comp_cells.
    - exact transpose_ver_sq_bicat_prebicat_laws.
    - exact (pr2 ‚Ñç).
  Defined.

  Definition transpose_ver_bicat_sq_bicat_ver_id_comp_sq
    : ver_bicat_sq_bicat_ver_id_comp_sq transpose_ver_bicat_sq_bicat.
  Proof.
    split.
    - exact (Œª (x y : B) (v : x -|-> y), id_h_square_bicat v).
    - exact (Œª (x‚ÇÅ y‚ÇÅ z‚ÇÅ x‚ÇÇ y‚ÇÇ z‚ÇÇ : B)
               (vx : x‚ÇÅ -|-> x‚ÇÇ)
               (vy : y‚ÇÅ -|-> y‚ÇÇ)
               (vz : z‚ÇÅ -|-> z‚ÇÇ)
               (h‚ÇÅ : x‚ÇÅ --> y‚ÇÅ) (h‚ÇÇ : y‚ÇÅ --> z‚ÇÅ)
               (k‚ÇÅ : x‚ÇÇ --> y‚ÇÇ) (k‚ÇÇ : y‚ÇÇ --> z‚ÇÇ)
               (s‚ÇÅ : square_double_bicat h‚ÇÅ k‚ÇÅ vx vy)
               (s‚ÇÇ : square_double_bicat h‚ÇÇ k‚ÇÇ vy vz),
             s‚ÇÅ ‚ãÜh s‚ÇÇ).
  Defined.

  Definition transpose_ver_bicat_sq_bicat_ver_id_comp
    : ver_bicat_sq_bicat_ver_id_comp.
  Proof.
    use make_ver_bicat_sq_bicat_ver_id_comp.
    - exact transpose_ver_bicat_sq_bicat.
    - exact transpose_ver_bicat_sq_bicat_ver_id_comp_sq.
  Defined.

  (** *  3. The whiskering operations *)
  Definition transpose_double_bicat_whiskering
    : double_bicat_whiskering transpose_ver_bicat_sq_bicat_ver_id_comp.
  Proof.
    repeat split.
    - exact (Œª (w x y z : B)
               (v‚ÇÅ : w -|-> x)
               (v‚ÇÇ : y -|-> z)
               (h‚ÇÅ h‚ÇÅ' : w --> y)
               (h‚ÇÇ : x --> z)
               (œÑ : h‚ÇÅ ==> h‚ÇÅ')
               (s : square_double_bicat h‚ÇÅ' h‚ÇÇ v‚ÇÅ v‚ÇÇ),
             œÑ ‚ñµs s).
    - exact (Œª (w x y z : B)
               (v‚ÇÅ : w -|-> x)
               (v‚ÇÇ : y -|-> z)
               (h‚ÇÅ : w --> y)
               (h‚ÇÇ h‚ÇÇ' : x --> z)
               (œÑ : h‚ÇÇ ==> h‚ÇÇ')
               (s : square_double_bicat h‚ÇÅ h‚ÇÇ v‚ÇÅ v‚ÇÇ),
             œÑ ‚ñøs s).
    - exact (Œª (w x y z : B)
               (v‚ÇÅ v‚ÇÅ' : w -|-> x)
               (v‚ÇÇ : y -|-> z)
               (h‚ÇÅ : w --> y)
               (h‚ÇÇ : x --> z)
               (œÑ : v‚ÇÅ =|=> v‚ÇÅ')
               (s : square_double_bicat h‚ÇÅ h‚ÇÇ v‚ÇÅ' v‚ÇÇ),
             œÑ ‚óÉs s).
    - exact (Œª (w x y z : B)
               (v‚ÇÅ : w -|-> x)
               (v‚ÇÇ v‚ÇÇ' : y -|-> z)
               (h‚ÇÅ : w --> y)
               (h‚ÇÇ : x --> z)
               (œÑ : v‚ÇÇ =|=> v‚ÇÇ')
               (s : square_double_bicat h‚ÇÅ h‚ÇÇ v‚ÇÅ v‚ÇÇ),
             œÑ ‚ñπs s).
  Defined.

  Definition transpose_ver_bicat_sq_id_comp_whisker
    : ver_bicat_sq_id_comp_whisker.
  Proof.
    use make_ver_bicat_sq_id_comp_whisker.
    - exact transpose_ver_bicat_sq_bicat_ver_id_comp.
    - exact transpose_double_bicat_whiskering.
  Defined.

  Proposition transpose_whisker_square_bicat_law
    : whisker_square_bicat_law transpose_ver_bicat_sq_id_comp_whisker.
  Proof.
    repeat split ; intro ; intros ; cbn.
    - apply uwhisker_square_id.
    - apply uwhisker_square_comp.
    - apply dwhisker_square_id.
    - apply dwhisker_square_comp.
    - apply lwhisker_square_id.
    - apply lwhisker_square_comp.
    - apply rwhisker_square_id.
    - apply rwhisker_square_comp.
    - apply rwhisker_lwhisker_square.
    - refine (!_).
      apply lwhisker_uwhisker_square.
    - refine (!_).
      apply lwhisker_dwhisker_square.
    - refine (!_).
      apply rwhisker_uwhisker_square.
    - refine (!_).
      apply rwhisker_dwhisker_square.
    - apply dwhisker_uwhisker_square.
    - apply uwhisker_id_v_square.
    - apply lwhisker_id_h_square.
    - apply lwhisker_hcomp_square.
    - apply rwhisker_hcomp_square.
    - apply lrwhisker_hcomp_square.
    - apply uwhisker_vcomp_square.
    - apply dwhisker_vcomp_square.
    - apply ud_whisker_vcomp_square.
  Qed.

  Proposition transpose_double_bicat_id_comp_square_laws
    : double_bicat_id_comp_square_laws transpose_ver_bicat_sq_id_comp_whisker.
  Proof.
    repeat split ; intro ; intros ; cbn.
    - refine (!_).
      apply double_bicat_interchange.
    - refine (!_).
      apply id_h_square_bicat_id.
    - apply id_v_square_bicat_comp.
    - apply id_h_square_bicat_comp.
  Qed.

  Proposition transpose_double_bicat_cylinder_laws
    : double_bicat_cylinder_laws transpose_ver_bicat_sq_id_comp_whisker.
  Proof.
    repeat split.
    - intro ; intros ; cbn.
      refine (!_).
      apply lassociator_v_comp_square.
    - intro ; intros ; cbn.
      refine (!_).
      apply lassociator_h_comp_square.
    - intro ; intros ; cbn.
      refine (!_).
      apply lunitor_v_comp_square.
    - intro ; intros ; cbn.
      refine (!_).
      apply lunitor_h_comp_square.
    - intro ; intros ; cbn.
      refine (!_).
      apply runitor_v_comp_square.
    - intro ; intros ; cbn.
      refine (!_).
      apply runitor_h_comp_square.
    - intros x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ z‚ÇÅ z‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ v‚ÇÅ v‚ÇÅ' v‚ÇÇ v‚ÇÇ'.
      intros w‚ÇÅ w‚ÇÅ' w‚ÇÇ w‚ÇÇ' œÑ‚ÇÅ œÑ‚ÇÇ Œ∏‚ÇÅ Œ∏‚ÇÇ s‚ÇÅ s‚ÇÅ' s‚ÇÇ s‚ÇÇ' p q.
      exact (!(hor_bicat_hcomp_h_comp_square B _ _ _ _ _ _ _ _ (!p) (!q))).
    - intros x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ z‚ÇÅ z‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ v‚ÇÅ v‚ÇÅ' v‚ÇÇ v‚ÇÇ'.
      intros w‚ÇÅ w‚ÇÅ' w‚ÇÇ w‚ÇÇ' œÑ‚ÇÅ œÑ‚ÇÇ Œ∏‚ÇÅ Œ∏‚ÇÇ s‚ÇÅ s‚ÇÅ' s‚ÇÇ s‚ÇÇ' p q.
      exact (!(ver_bicat_hcomp_v_comp_square B _ _ _ _ _ _ _ _ (!p) (!q))).
  Qed.

  Proposition transpose_double_bicat_laws
    : double_bicat_laws transpose_ver_bicat_sq_id_comp_whisker.
  Proof.
    use make_double_bicat_laws.
    - exact transpose_whisker_square_bicat_law.
    - exact transpose_double_bicat_id_comp_square_laws.
    - exact transpose_double_bicat_cylinder_laws.
    - intro ; intros.
      apply isaset_square_double_bicat.
  Defined.

  (** * 4. The transpose of a Verity double bicategory *)
  Definition transpose_verity_double_bicat
    : verity_double_bicat.
  Proof.
    use make_verity_double_bicat.
    - exact transpose_ver_bicat_sq_id_comp_whisker.
    - exact transpose_double_bicat_laws.
  Defined.
End Transpose.
